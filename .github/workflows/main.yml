on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Add properties file
        run: echo '${{ secrets.PROD_APPLICATION_PROPERTIES }}' > ./src/main/resources/application-prod.properties

      # Jar 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # AWS IAM 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR login password
        id: get-ecr-password
        run |
          ECR_PASSWORD=$(aws ecr get-login-password --region ap-northeast-2)
          echo $ECR_PASSWORD
          echo "::set-output name=ecr_password::$ECR_PASSWORD"
#
#      # 이미지 태그 생성
#      - name: Make image tag
#        id: image
#        run: |
#          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
#          echo VERSION=$VERSION
#          echo "::set-output name=version::$VERSION"
#
#      # 도커 이미지 빌드 & AWS ECR에 푸시
#      - name: Build and Push images to AWS ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ steps.image.outputs.version }}
#        run: |
#          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
#          echo "::set-output name=image_tag::$IMAGE_TAG"
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Setup Kustomize
#        uses: imranismail/setup-kustomize@v1
#
#      - name: Checkout kustomize repository
#        uses: actions/checkout@v2
#        with:
#          repository: yologger/heart-to-heart-api-manifest
#          ref: main
#          token: ${{ secrets.PROD_MANIFEST_REPO_TOKEN }}
#          path: heart-to-heart-api-manifest
#
#      - name: Update Kubernetes resources
#        run: |
#          echo ${{ steps.login-ecr.outputs.registry }}
#          echo ${{ steps.build-image.outputs.ecr_repository }}
#          echo ${{ steps.build-image.outputs.image_tag }}
#          cd heart-to-heart-api-manifest/overlays/prod/
#          kustomize edit set image ${{ steps.login-ecr.outputs.registry}}/${{ steps.build-image.outputs.ecr_repository }}=${{ steps.login-ecr.outputs.registry}}/${{ steps.build-image.outputs.ecr_repository }}:${{ steps.build-image.outputs.image_tag }}
#          cat kustomization.yml
#
#      - name: Commit files
#        run: |
#          cd heart-to-heart-api-manifest
#          git config --global user.email "yologger1013@gmail.com"
#          git config --global user.name "yologger1013"
#          git commit -am "Update image tag"
#          git push -u origin main
#
#      - name: Send result to slack
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{job.status}}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
#          author_name: Geerio CI
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.PROD_SLACK_WEBHOOK_URL }}