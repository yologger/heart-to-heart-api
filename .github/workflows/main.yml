on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Add properties file
        run: echo '${{ secrets.PROD_APPLICATION_PROPERTIES }}' > ./src/main/resources/application-prod.properties

      # Jar 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # AWS IAM 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ECR IAM 비밀번호 획득
      - name: Get ECR login password
        id: get-ecr-password
        run: |
          ECR_PASSWORD=$(aws ecr get-login-password --region ${{ secrets.PROD_AWS_REGION }})
          echo "::set-output name=ecr_password::$ECR_PASSWORD"

      # 이미지 태그 생성
      - name: Make image tag
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      # Build Docker images, Push AWS ECR
      - name: Build and Push images to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Helm Chart
        run: |
          VERSION=$(cat ./charts/production/values.yaml | grep version: | awk '{print $2}')
          sed -i "s/$VERSION/${{ steps.image.outputs.version }}/" ./charts/production/values.yaml

      - name: Commit and push changes
        uses: devops-infra/action-commit-push@v0.3
        with:
          github_token: ${{ secrets.REPOSITORY_TOKEN }}
          commit_message: "[UPDATE] Helm Release Auto Update by Github Actions"

      # Slack Message
      - name: Send result to slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: Geerio CI
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PROD_SLACK_WEBHOOK_URL }}